!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
LRU_BITS	skip.c	27;"	d	file:
LRU_CLOCK_MAX	skip.c	28;"	d	file:
LRU_CLOCK_RESOLUTION	skip.c	29;"	d	file:
ZSKIPLIST_MAXLEVEL	skip.c	30;"	d	file:
ZSKIPLIST_P	skip.c	31;"	d	file:
backward	skip.c	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistNode	file:
encoding	skip.c	/^    unsigned encoding:4;$/;"	m	struct:redisObject	file:
forward	skip.c	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode::zskiplistLevel::zskiplistNode	file:
header	skip.c	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::zskiplistNode	file:
length	skip.c	/^    unsigned long length;$/;"	m	struct:zskiplist	file:
level	skip.c	/^    int level;$/;"	m	struct:zskiplist	file:
level	skip.c	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel	file:
lru	skip.c	/^    unsigned lru:LRU_BITS; \/* lru time (relative to server.lruclock) *\/$/;"	m	struct:redisObject	file:
obj	skip.c	/^    robj *obj;$/;"	m	struct:zskiplistNode	file:
ptr	skip.c	/^    void *ptr;$/;"	m	struct:redisObject	file:
redisObject	skip.c	/^typedef struct redisObject {$/;"	s	file:
refcount	skip.c	/^    int refcount;$/;"	m	struct:redisObject	file:
robj	skip.c	/^} robj;$/;"	t	typeref:struct:redisObject	file:
score	skip.c	/^    double score;$/;"	m	struct:zskiplistNode	file:
span	skip.c	/^        unsigned int span;$/;"	m	struct:zskiplistNode::zskiplistLevel	file:
tail	skip.c	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::	file:
type	skip.c	/^    unsigned type:4;$/;"	m	struct:redisObject	file:
zskiplist	skip.c	/^typedef struct zskiplist {$/;"	s	file:
zskiplist	skip.c	/^} zskiplist;$/;"	t	typeref:struct:zskiplist	file:
zskiplistLevel	skip.c	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode	file:
zskiplistNode	skip.c	/^typedef struct zskiplistNode {$/;"	s	file:
zskiplistNode	skip.c	/^} zskiplistNode;$/;"	t	typeref:struct:zskiplistNode	file:
zslCreate	skip.c	/^zskiplist *zslCreate(void) {$/;"	f
zslCreateNode	skip.c	/^zskiplistNode *zslCreateNode(int level, double score, robj *obj) {$/;"	f
zslDelete	skip.c	/^int zslDelete(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslDeleteNode	skip.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f
zslDeleteRangeByLex	skip.c	/^unsigned long zslDeleteRangeByLex(zskiplist *zsl, zlexrangespec *range, dict *dict) {$/;"	f
zslDeleteRangeByRank	skip.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict) {$/;"	f
zslDeleteRangeByScore	skip.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec *range, dict *dict) {$/;"	f
zslFirstInRange	skip.c	/^zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslFree	skip.c	/^void zslFree(zskiplist *zsl) {$/;"	f
zslFreeNode	skip.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f
zslGetElementByRank	skip.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f
zslGetRank	skip.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, robj *o) {$/;"	f
zslInsert	skip.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslIsInRange	skip.c	/^int zslIsInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslLastInRange	skip.c	/^zskiplistNode *zslLastInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslParseRange	skip.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	file:
zslRandomLevel	skip.c	/^int zslRandomLevel(void) {$/;"	f
zslValueGteMin	skip.c	/^static int zslValueGteMin(double value, zrangespec *spec) {$/;"	f	file:
zslValueLteMax	skip.c	/^int zslValueLteMax(double value, zrangespec *spec) {$/;"	f
