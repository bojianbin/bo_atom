!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CFLAGS	Makefile	/^CFLAGS = $/;"	m
FILTER_OUT	Makefile	/^FILTER_OUT = $/;"	m
HEIGHT_LIMIT	jsw_rbtree.c	20;"	d	file:
JSW_RBTREE_H	jsw_rbtree.h	2;"	d
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
OBJ	Makefile	/^OBJ=$(filter-out $(FILTER_OUT),$(OBJ_s))$/;"	m
OBJ_s	Makefile	/^OBJ_s = $(patsubst %.c,%.o,$(wildcard .\/*.c))$/;"	m
TARGET	Makefile	/^TARGET = rbtree$/;"	m
centroid	example.c	/^typedef struct centroid {$/;"	s	file:
centroid_cmp	example.c	/^static int centroid_cmp(const void *p1, const void *p2)$/;"	f	file:
centroid_dup	example.c	/^static void *centroid_dup(void *p)$/;"	f	file:
centroid_rel	example.c	/^static void centroid_rel(void *p)$/;"	f	file:
centroid_t	example.c	/^} centroid_t;$/;"	t	typeref:struct:centroid	file:
cmp	jsw_rbtree.c	/^  cmp_f         cmp;  \/* Compare two items *\/$/;"	m	struct:jsw_rbtree	file:
cmp_f	jsw_rbtree.h	/^typedef int   (*cmp_f) ( const void *p1, const void *p2 );$/;"	t
count	example.c	/^  int               count;$/;"	m	struct:centroid	file:
data	jsw_rbtree.c	/^  void              *data;    \/* User-defined content *\/$/;"	m	struct:jsw_rbnode	file:
dup	jsw_rbtree.c	/^  dup_f         dup;  \/* Clone an item (user-defined) *\/$/;"	m	struct:jsw_rbtree	file:
dup_f	jsw_rbtree.h	/^typedef void *(*dup_f) ( void *p );$/;"	t
free	jsw_rbtree.c	/^using std::free;$/;"	m	class:std	file:
is_red	jsw_rbtree.c	/^static int is_red ( jsw_rbnode_t *root )$/;"	f	file:
it	jsw_rbtree.c	/^  jsw_rbnode_t *it;                 \/* Current node *\/$/;"	m	struct:jsw_rbtrav	file:
jsw_double	jsw_rbtree.c	/^static jsw_rbnode_t *jsw_double ( jsw_rbnode_t *root, int dir )$/;"	f	file:
jsw_rbdelete	jsw_rbtree.c	/^void jsw_rbdelete ( jsw_rbtree_t *tree )$/;"	f
jsw_rberase	jsw_rbtree.c	/^int jsw_rberase ( jsw_rbtree_t *tree, void *data )$/;"	f
jsw_rbfind	jsw_rbtree.c	/^void *jsw_rbfind ( jsw_rbtree_t *tree, void *data )$/;"	f
jsw_rbinsert	jsw_rbtree.c	/^int jsw_rbinsert ( jsw_rbtree_t *tree, void *data )$/;"	f
jsw_rbnew	jsw_rbtree.c	/^jsw_rbtree_t *jsw_rbnew ( cmp_f cmp, dup_f dup, rel_f rel )$/;"	f
jsw_rbnode	jsw_rbtree.c	/^typedef struct jsw_rbnode {$/;"	s	file:
jsw_rbnode_t	jsw_rbtree.c	/^} jsw_rbnode_t;$/;"	t	typeref:struct:jsw_rbnode	file:
jsw_rbsize	jsw_rbtree.c	/^size_t jsw_rbsize ( jsw_rbtree_t *tree )$/;"	f
jsw_rbtdelete	jsw_rbtree.c	/^void jsw_rbtdelete ( jsw_rbtrav_t *trav )$/;"	f
jsw_rbtfirst	jsw_rbtree.c	/^void *jsw_rbtfirst ( jsw_rbtrav_t *trav, jsw_rbtree_t *tree )$/;"	f
jsw_rbtlast	jsw_rbtree.c	/^void *jsw_rbtlast ( jsw_rbtrav_t *trav, jsw_rbtree_t *tree )$/;"	f
jsw_rbtnew	jsw_rbtree.c	/^jsw_rbtrav_t *jsw_rbtnew ( void )$/;"	f
jsw_rbtnext	jsw_rbtree.c	/^void *jsw_rbtnext ( jsw_rbtrav_t *trav )$/;"	f
jsw_rbtprev	jsw_rbtree.c	/^void *jsw_rbtprev ( jsw_rbtrav_t *trav )$/;"	f
jsw_rbtrav	jsw_rbtree.c	/^struct jsw_rbtrav {$/;"	s	file:
jsw_rbtrav_t	jsw_rbtree.h	/^typedef struct jsw_rbtrav jsw_rbtrav_t;$/;"	t	typeref:struct:jsw_rbtrav
jsw_rbtree	jsw_rbtree.c	/^struct jsw_rbtree {$/;"	s	file:
jsw_rbtree_t	jsw_rbtree.h	/^typedef struct jsw_rbtree jsw_rbtree_t;$/;"	t	typeref:struct:jsw_rbtree
jsw_single	jsw_rbtree.c	/^static jsw_rbnode_t *jsw_single ( jsw_rbnode_t *root, int dir )$/;"	f	file:
link	jsw_rbtree.c	/^  struct jsw_rbnode *link[2]; \/* Left (0) and right (1) links *\/$/;"	m	struct:jsw_rbnode	typeref:struct:jsw_rbnode::jsw_rbnode	file:
main	example.c	/^int main()$/;"	f
malloc	jsw_rbtree.c	/^using std::malloc;$/;"	m	class:std	file:
mean	example.c	/^  double            mean;$/;"	m	struct:centroid	file:
move	jsw_rbtree.c	/^static void *move ( jsw_rbtrav_t *trav, int dir )$/;"	f	file:
new_node	jsw_rbtree.c	/^static jsw_rbnode_t *new_node ( jsw_rbtree_t *tree, void *data )$/;"	f	file:
path	jsw_rbtree.c	/^  jsw_rbnode_t *path[HEIGHT_LIMIT]; \/* Traversal path *\/$/;"	m	struct:jsw_rbtrav	file:
red	jsw_rbtree.c	/^  int                red;     \/* Color (1=red, 0=black) *\/$/;"	m	struct:jsw_rbnode	file:
rel	jsw_rbtree.c	/^  rel_f         rel;  \/* Destroy an item (user-defined) *\/$/;"	m	struct:jsw_rbtree	file:
rel_f	jsw_rbtree.h	/^typedef void  (*rel_f) ( void *p );$/;"	t
root	jsw_rbtree.c	/^  jsw_rbnode_t *root; \/* Top of the tree *\/$/;"	m	struct:jsw_rbtree	file:
size	jsw_rbtree.c	/^  size_t        size; \/* Number of items (user-defined) *\/$/;"	m	struct:jsw_rbtree	file:
size_t	jsw_rbtree.c	/^using std::size_t;$/;"	m	class:std	file:
start	jsw_rbtree.c	/^static void *start ( jsw_rbtrav_t *trav, jsw_rbtree_t *tree, int dir )$/;"	f	file:
top	jsw_rbtree.c	/^  size_t        top;                \/* Top of stack *\/$/;"	m	struct:jsw_rbtrav	file:
tree	jsw_rbtree.c	/^  jsw_rbtree_t *tree;               \/* Paired tree *\/$/;"	m	struct:jsw_rbtrav	file:
